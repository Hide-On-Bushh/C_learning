#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

//写一段代码告诉我们当前机器存储的字节序（2015百度校招题）

//1 00 00 00 01
//小端；01 00 00 00
//大端 00 00 00 01

//int main()
//{
//	int a = 1;
//	char* p=(char*)&a;//因为char*只访问一个字节,指针类型决定访问了几个字节
//	if (1 == *p)
//	{
//		printf("小端");
//	}
//	else
//	{
//		printf("大端");
//	}
//	return 0;
//}

// 笔试题

//int main()
//{
//	char a = -1;//存的是补码形式
//	//1000 0000 0000 0001原码
//	//1111 1111 1111 1110反码
//	//1111 1111 1111 1111补码
//	//1111 1111 char只能存一个字节，8个比特位
//	//打印的是%d 会发生整形提升补符号位(有符号数补符号位）
//	//1111 1111 1111 11111
//	//提升后的是补码，打印的是原码，所以倒回去还是-1
//
//	signed char b = -1;//-1
//	//1111 1111
//	//同理a
//
//	unsigned char c = -1;//255
//	//1111 1111整型提升（无符号数补0）
//	//0000 0000 1111 1111（32位，省略部分数字）
//	printf("%d %d %d", a, b, c);
//	return 0;
//}

/*int main()
{
	char a = -128;*///128的结果也一样
	//1000 0000 1000 0000原码 省略32位
	//1111 1111 0111 1111反码
	//1111 1111 1000 0000补码
	//1000 0000
	//发生整形提升补符号位1111 1111 1000 0000 因为打印%u,所以数字原反补相同，打印的就是前面这个数字
//	printf("%u\n", a);//打印十进制 无符号数字
//	return 0;
//}

//int main()
//{
//	int i = -20;
	//1000 0000 0001 0100
	//1111 1111 1110 1011
	//1111 1111 1110 1100补
	/*unsigned int j = 10;*/
	//0000 0000 0000 1010补

	//1111 1111 1111 0110以补码相加的结果
	//1000 0000 0000 1010化为有符号数的原码结果为-10
//	printf("%d\n", i + j);
//}

//int main()
//{
//	unsigned int i;
//	for (i = 9; i >= 0; i--);//无符号数范围是0--255，所以一直死循环
//	{
//		printf("%u\n", i);
//	}
//	return 0;
//}

//int main()
//{
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000; i++)
//	{//因为一个char类型的范围在-128――127，接着往后-129换算一下就是正的127
//		//1000 0001
//		a[i] = -1 - i;//-1,-2,-3.....-128,127,126......0strlen就算到\0停止 因为char0是字符ASCII值为0的\0
//	}
//	printf("%d", strlen(a));// 255个不算0
//	return 0;
//}

//unsigned char i = 0;//unsigned char范围是0――255
//int main()
//{
//	for (i = 0; i <= 255; i++)//所以i<=255不是256而是0恒成立就一直循环
//	{
//		printf("hello world\n");//死循环 
//	}
//	return 0;
//}

//9.0
//1001
//(-1)^0 * 1.001 * 2^3
//(-1)^s * M     * 2^E
//s=0
//M=1.001
//E=3
//int main()
//{
//	int n = 9;//四个字节
//
//	float* p = (float*)&n;
//	printf("%d\n", n);
//	printf("%f\n", *p);
//
//	*p = 9.0;
//	printf("%d\n", n);
//	printf("%f\n", *p);
//	return 0;
//}
